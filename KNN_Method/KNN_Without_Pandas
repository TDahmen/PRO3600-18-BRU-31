#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## /!\ Il est nécessaire de placer les deus bases de données "gamesData.npy" et "oneHotEncoded.npy" dans le même répertoire que ce script Python

import collections as col
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 

gamesData = np.load('gamesData.npy') ## Importation des 2 bases de données
oneHotEncoded = np.load('oneHotEncoded.npy')

dataset1 = pd.DataFrame(gamesData) ## Conversion en DataFrame utilisables par Panda
dataset2 = pd.DataFrame(oneHotEncoded)

X = dataset1 
y = dataset2 

from sklearn.model_selection import train_test_split  ## Création des tables d'entrainements et des tables de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1000/389960)

print(X_train,X_test,y_train,y_test)



def train(X_train, y_train): ## Création du bloc d'entrainement
	return

def predict(X_train, y_train, x_test, k): ## Création du bloc de prédiction
    
	distances = []
	cible = []

	for i in range(len(X_train)):
         ## Calcul des distance à l'aide de la distance euclidienne
		distance = np.sqrt(np.sum(np.square(x_test - X_train[i, :])))
		## Ajout à la liste contenant toutes les distances
		distances.append([distance, i])

	## Tri de la liste
	distances = sorted(distances)

	## Établissement de la liste des K voisins contenus dans la cible
	for i in range(k):
		index = distances[i][1]
		cible.append(y_train[index])

	## On retourne la cible reccurente
	return col.Counter(cible).most_common(1)[0][0]

def kNearestNeighbor(X_train, y_train, X_test, predictions, k):
	## Processus d'entrainement des données entrantes
	train(X_train, y_train)

	## Recensement de toutes les observations
	for i in range(len(X_test)):
		predictions.append(predict(X_train, y_train, X_test[i, :], k))
        



